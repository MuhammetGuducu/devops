name: Produktion - Bauen, Scannen & Deployen

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write      # FÃ¼r AWS-Authentifizierung
  contents: read       # FÃ¼r Code-Checkout
  security-events: write # FÃ¼r Trivy-Scan-Upload

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: devops-demo-repo

jobs:
  build-and-scan:
    name: Job - Bauen, Testen & Scannen
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Code auschecken
        uses: actions/checkout@v4

      - name: Node.js einrichten
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Version generieren
        id: version
        run: |
          VERSION="1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: AbhÃ¤ngigkeiten installieren
        run: npm ci

      - name: Tests ausfÃ¼hren
        run: npm test

      - name: Test-Reports hochladen
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: reports/jest-junit.xml
          retention-days: 30

      - name: Docker-Image bauen
        id: build-image
        run: |
          docker build \
            --build-arg VERSION=${{ steps.version.outputs.version }} \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            -t devops-demo:${{ github.sha }} .
          echo "image_tag=devops-demo:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.build-image.outputs.image_tag }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Nicht bei Vulnerabilities fehlschlagen

      - name: Trivy-Ergebnisse hochladen
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Job - Nach Produktion deployen
    runs-on: ubuntu-latest
    needs: build-and-scan
    environment: production
    steps:
      - name: Code auschecken
        uses: actions/checkout@v4

      - name: AWS-Zugangsdaten konfigurieren
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Bei Amazon ECR anmelden
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker-Image bauen & nach ECR pushen
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          VERSION: ${{ needs.build-and-scan.outputs.version }}
        run: |
          # Image mit Build-Args bauen
          docker build \
            --build-arg VERSION=$VERSION \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
          
          # Beide Tags pushen
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Node.js fÃ¼r CDK einrichten
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: infra/package-lock.json

      - name: AWS CDK installieren
        run: |
          npm install -g aws-cdk@2.171.0
          cdk --version

      - name: CDK-AbhÃ¤ngigkeiten installieren
        working-directory: ./infra
        run: npm ci

      - name: CDK Build
        working-directory: ./infra
        run: npm run build

      - name: CDK Deploy
        working-directory: ./infra
        env:
          APP_VERSION: ${{ needs.build-and-scan.outputs.version }}
          COMMIT_SHA: ${{ github.sha }}
        run: |
          npx cdk deploy \
            --require-approval never \
            --context appVersion=$APP_VERSION \
            --context commitSha=$COMMIT_SHA

      - name: Service URL ausgeben
        run: |
          SERVICE_URL=$(aws cloudformation describe-stacks \
            --stack-name bachelor-prod-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`ServiceURL`].OutputValue' \
            --output text)
          echo "ðŸš€ Service deployed to: $SERVICE_URL"