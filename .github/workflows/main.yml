name: Produktion - Bauen, Scannen & Deployen

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read
  security-events: write

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: bachelor-app-repo

jobs:
  build-and-scan:
    name: Job - Bauen, Testen & Scannen
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Code auschecken
        uses: actions/checkout@v4

      - name: Node.js einrichten
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Version generieren
        id: version
        run: |
          VERSION="1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Abhängigkeiten installieren
        run: |
          npm ci
          echo "Dependencies installed successfully"

      - name: Tests ausführen
        run: |
          echo "Running tests..."
          npm test
          echo "Tests completed"

      - name: Test-Reports hochladen
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: reports/jest-junit.xml
          retention-days: 30

      - name: Docker-Image bauen
        id: build-image
        run: |
          echo "Building Docker image..."
          docker build \
            --build-arg VERSION=${{ steps.version.outputs.version }} \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            -t bachelor-app:${{ github.sha }} \
            -t bachelor-app:latest .
          echo "Docker build completed"

      - name: Container testen
        run: |
          echo "Testing container..."
          docker run -d --name test-container -p 8080:8080 bachelor-app:latest
          sleep 10
          curl -f http://localhost:8080/health || exit 1
          docker stop test-container
          docker rm test-container
          echo "Container test successful"

      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'bachelor-app:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Trivy-Ergebnisse hochladen
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Job - Nach Produktion deployen
    runs-on: ubuntu-latest
    needs: build-and-scan
    environment: production
    steps:
      - name: Code auschecken
        uses: actions/checkout@v4

      - name: AWS-Zugangsdaten konfigurieren
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Bei Amazon ECR anmelden
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: ECR Repository erstellen (falls nicht vorhanden)
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

      - name: Docker-Image bauen & nach ECR pushen
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          VERSION: ${{ needs.build-and-scan.outputs.version }}
        run: |
          echo "Building production image..."
          docker build \
            --build-arg VERSION=$VERSION \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:v$VERSION .
          
          echo "Pushing images to ECR..."
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:v$VERSION
          echo "Push completed"

      - name: Node.js für CDK einrichten
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Deployment starten und via App-Endpoint verifizieren
        id: deploy_and_verify
        run: |
          set -e

          SERVICE_NAME="bachelor-rest-api"
          EXPECTED_COMMIT_SHA="${{ github.sha }}"
          
          echo "INFO: Suche ARN und URL für Service '$SERVICE_NAME'..."
          SERVICE_INFO=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$SERVICE_NAME']")
          SERVICE_ARN=$(echo $SERVICE_INFO | jq -r '.[0].ServiceArn')
          SERVICE_URL="https://$(echo $SERVICE_INFO | jq -r '.[0].ServiceUrl')"
          if [ -z "$SERVICE_ARN" ] || [ "$SERVICE_ARN" == "null" ]; then echo "ERROR: Service nicht gefunden."; exit 1; fi

          echo "INFO: Warte, bis der Service stabil und im Zustand RUNNING ist..."
          for i in {1..20}; do # max 5 Minuten
            STATUS=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.Status" --output text)
            echo "INFO (Pre-Check): Aktueller Status ist '$STATUS'."
            if [ "$STATUS" == "RUNNING" ]; then break; fi
            if [[ "$STATUS" == "CREATE_FAILED" || "$STATUS" == "DELETED" ]]; then echo "ERROR: Service ist im Fehlerzustand '$STATUS'."; exit 1; fi
            if [ "$i" -eq 20 ]; then echo "ERROR: Zeitüberschreitung. Service wurde nicht rechtzeitig bereit."; exit 1; fi
            sleep 15
          done

          echo "INFO: Starte neues Deployment für Commit $EXPECTED_COMMIT_SHA..."
          aws apprunner start-deployment --service-arn $SERVICE_ARN

          echo "INFO: Warte auf Abschluss und Verifizierung des Deployments (max. 20 Minuten)..."
          for i in {1..40}; do # max 20 Minuten
            STATUS=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.Status" --output text)
            echo "INFO (Post-Check): Service-Status ist '$STATUS'."

            if [ "$STATUS" == "RUNNING" ]; then
              echo "INFO: Service ist RUNNING. Prüfe den Commit-SHA am /deployment Endpoint..."
              # --fail lässt curl bei HTTP-Fehlern scheitern, jq fängt 'null' ab
              DEPLOYED_COMMIT_SHA=$(curl -s --fail --max-time 10 "$SERVICE_URL/deployment" | jq -r '.commitSha // "not-found"')

              if [ "$DEPLOYED_COMMIT_SHA" == "$EXPECTED_COMMIT_SHA" ]; then
                echo "SUCCESS: Korrekter Commit $DEPLOYED_COMMIT_SHA wurde deployed und ist RUNNING."
                exit 0
              else
                echo "INFO: Falscher Commit. Erwartet: $EXPECTED_COMMIT_SHA, Gefunden: $DEPLOYED_COMMIT_SHA. Warte..."
              fi
            fi
            
            if [[ "$STATUS" == "OPERATION_FAILED" || "$STATUS" == "DELETE_FAILED" ]]; then
               echo "ERROR: Deployment-Operation ist fehlgeschlagen mit Status '$STATUS'."
               exit 1
            fi
            sleep 30
          done
          
          echo "ERROR: Zeitüberschreitung. Deployment-Verifizierung war nicht erfolgreich."
          exit 1