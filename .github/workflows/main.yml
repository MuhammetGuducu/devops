name: Produktion - Bauen, Scannen & Deployen

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read
  security-events: write

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: bachelor-app-repo

jobs:
  build-and-scan:
    name: Job - Bauen, Testen & Scannen
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Code auschecken
        uses: actions/checkout@v4

      - name: Node.js einrichten
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Version generieren
        id: version
        run: |
          VERSION="1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Abhängigkeiten installieren
        run: |
          npm ci
          echo "Dependencies installed successfully"

      - name: Tests ausführen
        run: |
          echo "Running tests..."
          npm test
          echo "Tests completed"

      - name: Test-Reports hochladen
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: reports/jest-junit.xml
          retention-days: 30

      - name: Docker-Image bauen
        id: build-image
        run: |
          echo "Building Docker image..."
          docker build \
            --build-arg VERSION=${{ steps.version.outputs.version }} \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            -t bachelor-app:${{ github.sha }} \
            -t bachelor-app:latest .
          echo "Docker build completed"

      - name: Container testen
        run: |
          echo "Testing container..."
          docker run -d --name test-container -p 8080:8080 bachelor-app:latest
          sleep 10
          curl -f http://localhost:8080/health || exit 1
          docker stop test-container
          docker rm test-container
          echo "Container test successful"

      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'bachelor-app:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Trivy-Ergebnisse hochladen
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Job - Nach Produktion deployen
    runs-on: ubuntu-latest
    needs: build-and-scan
    environment: production
    steps:
      - name: Code auschecken
        uses: actions/checkout@v4

      - name: AWS-Zugangsdaten konfigurieren
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Bei Amazon ECR anmelden
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: ECR Repository erstellen (falls nicht vorhanden)
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

      - name: Docker-Image bauen & nach ECR pushen
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          VERSION: ${{ needs.build-and-scan.outputs.version }}
        run: |
          echo "Building production image..."
          docker build \
            --build-arg VERSION=$VERSION \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:v$VERSION .
          
          echo "Pushing images to ECR..."
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:v$VERSION
          echo "Push completed"

      - name: Node.js für CDK einrichten
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Deployment auf App Runner starten
        run: |
          echo "INFO: Suche ARN für Service 'bachelor-rest-api'..."
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='bachelor-rest-api'].ServiceArn" --output text)

          if [ -z "$SERVICE_ARN" ]; then
            echo "ERROR: Service 'bachelor-rest-api' nicht gefunden."
            exit 1
          fi

          echo "INFO: Warte, bis der Service den Zustand 'RUNNING' erreicht hat..."
          for i in {1..30}; do
            STATUS=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.Status" --output text)
            echo "INFO: Aktueller Status: $STATUS"
            
            # Bei Erfolg die Schleife verlassen
            [ "$STATUS" == "RUNNING" ] && break
            
            # Bei fatalem Fehler die Pipeline abbrechen
            if [ "$STATUS" == "CREATE_FAILED" ] || [ "$STATUS" == "DELETED" ]; then
              echo "ERROR: Service ist in einem nicht behebbaren Zustand ($STATUS)."
              exit 1
            fi
            
            # Timeout nach dem letzten Versuch
            [ "$i" -eq 30 ] && echo "ERROR: Zeitüberschreitung nach 7.5 Minuten." && exit 1
            
            sleep 15
          done

          aws apprunner start-deployment --service-arn $SERVICE_ARN
          
          echo "INFO: Deployment erfolgreich gestartet."

      - name: Warten bis Service betriebsbereit ist
        run: |
          echo "INFO: Suche ARN für Service 'bachelor-rest-api'"
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='bachelor-rest-api'].ServiceArn" --output text)

          if [ -z "$SERVICE_ARN" ]; then
            echo "ERROR: Service nicht gefunden."
            exit 1
          fi

          echo "INFO: Warte, bis Service den Status RUNNING erreicht"
          for i in {1..12}; do
            STATUS=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.Status" --output text)
            
            if [ "$STATUS" == "RUNNING" ]; then
              echo "SUCCESS: Service ist im Zustand RUNNING."
              exit 0
            elif [[ "$STATUS" == "CREATE_FAILED" || "$STATUS" == "DELETED" ]]; then
              echo "ERROR: Service ist im Fehlerzustand: $STATUS"
              exit 1
            fi
            
            echo "INFO: Aktueller Status ist '$STATUS'. Warte 10 Sekunden."
            sleep 10
          done
          
          echo "ERROR: Zeitüberschreitung. Service war nicht rechtzeitig bereit."
          exit 1