name: Produktion - Bauen, Scannen & Deployen

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write      # Für AWS-Authentifizierung
  contents: read       # Für Code-Checkout
  security-events: write # Für Trivy-Scan-Upload

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: bachelor-app-repo

jobs:
  build-and-scan:
    name: Job - Bauen, Testen & Scannen
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Code auschecken
        uses: actions/checkout@v4

      - name: Node.js einrichten
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Abhängigkeiten installieren & Tests ausführen
        run: |
          npm ci
          npm test

      - name: Test-Coverage Report
        run: |
          npm test -- --coverage --coverageReporters=text-lcov > coverage.lcov
          echo "Test Coverage erstellt"

      - name: Test-Reports hochladen
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            reports/jest-junit.xml
            coverage.lcov

      - name: Metadaten für Docker generieren
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}

      - name: Docker-Image bauen
        id: build-image
        run: |
          docker build \
            --build-arg VERSION=${{ steps.meta.outputs.version }} \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            -t bachelor-app:${{ github.sha }} .
          echo "image_tag=bachelor-app:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.build-image.outputs.image_tag }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Trivy-Ergebnisse hochladen
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Job - Nach Produktion deployen
    runs-on: ubuntu-latest
    needs: build-and-scan
    environment: production
    steps:
      - name: Code auschecken
        uses: actions/checkout@v4

      - name: AWS-Zugangsdaten konfigurieren
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Bei Amazon ECR anmelden
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker-Image bauen & nach ECR pushen
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          # Image mit Build-Args bauen
          docker build \
            --build-arg VERSION=${{ needs.build-and-scan.outputs.version }} \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
          
          # Beide Tags pushen
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}

      - name: Node.js für CDK einrichten
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: CDK-Abhängigkeiten installieren
        working-directory: ./infra
        run: npm ci

      - name: CDK Build
        working-directory: ./infra
        run: npm run build

      - name: CDK Deploy
        working-directory: ./infra
        env:
          APP_VERSION: ${{ needs.build-and-scan.outputs.version }}
          COMMIT_SHA: ${{ github.sha }}
        run: |
          npm run cdk deploy -- \
            --require-approval never \
            --context appVersion=$APP_VERSION \
            --context commitSha=$COMMIT_SHA

      - name: Deployment-Status prüfen
        run: |
          echo "✅ Deployment erfolgreich!"
          echo "Version: ${{ needs.build-and-scan.outputs.version }}"
          echo "Commit: ${{ github.sha }}"