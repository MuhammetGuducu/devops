name: Produktion - Bauen, Scannen & Deployen

on:
  push:
    branches: [ "main" ]

# Erforderliche Berechtigungen f√ºr AWS OIDC, Security Scans und Contents
permissions:
  id-token: write
  contents: read
  security-events: write

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: bachelor-app-repo

jobs:
  build-and-scan:
    name: Job - Bauen, Testen & Scannen
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Code auschecken
        uses: actions/checkout@v4

      - name: Node.js einrichten
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Version generieren
        id: version
        run: |
          VERSION="1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Abh√§ngigkeiten installieren
        run: |
          npm ci
          echo "Dependencies installed successfully"

      - name: Tests ausf√ºhren
        run: |
          echo "Running tests..."
          npm test
          echo "Tests completed"

      - name: Test-Reports hochladen
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: reports/jest-junit.xml
          retention-days: 30

      - name: Docker-Image bauen
        id: build-image
        run: |
          echo "Building Docker image..."
          docker build \
            --build-arg VERSION=${{ steps.version.outputs.version }} \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            -t bachelor-app:${{ github.sha }} \
            -t bachelor-app:latest .
          echo "Docker build completed"
          echo "image_tag=bachelor-app:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Container testen
        run: |
          echo "Testing container..."
          docker run -d --name test-container -p 8080:8080 bachelor-app:latest
          sleep 5
          curl -f http://localhost:8080/health || exit 1
          docker stop test-container
          docker rm test-container
          echo "Container test successful"

      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'bachelor-app:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Trivy-Ergebnisse hochladen
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Job - Nach Produktion deployen
    runs-on: ubuntu-latest
    needs: build-and-scan
    environment: production
    steps:
      - name: Code auschecken
        uses: actions/checkout@v4

      - name: AWS-Zugangsdaten konfigurieren
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Neueste AWS CLI v2 installieren
        run: |
          echo "Installing latest AWS CLI v2 to ensure all commands are available..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          rm -rf awscliv2.zip aws
          echo "AWS CLI version:"
          aws --version
        
      - name: Bei Amazon ECR anmelden
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: ECR Repository erstellen (falls nicht vorhanden)
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

      - name: Docker-Image bauen & nach ECR pushen
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          VERSION: ${{ needs.build-and-scan.outputs.version }}
        run: |
          echo "Building production image..."
          docker build \
            --build-arg VERSION=$VERSION \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:v$VERSION .
          
          echo "Pushing images to ECR..."
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }} --all-tags
          echo "Push completed"

      - name: Bestehenden App Runner Service l√∂schen (falls vorhanden)
        run: |
          SERVICE_NAME="bachelor-rest-api"
          echo "Pr√ºfe, ob ein Service namens '$SERVICE_NAME' existiert, um Namenskonflikte zu vermeiden..."
          
          SERVICE_ARN=$(aws apprunner list-services \
            --query "ServiceSummaryList[?ServiceName=='$SERVICE_NAME'].ServiceArn" \
            --output text)

          if [ -n "$SERVICE_ARN" ]; then
            echo "Service gefunden (ARN: $SERVICE_ARN). L√∂sche um Platz f√ºr das CDK-Deployment zu machen."
            aws apprunner delete-service --service-arn "$SERVICE_ARN"
            echo "L√∂schbefehl gesendet. Warte, bis der Service vollst√§ndig gel√∂scht ist, um Race Conditions zu verhindern..."
            aws apprunner wait service-deleted --service-arn "$SERVICE_ARN"
            echo "Service erfolgreich gel√∂scht."
          else
            echo "Service '$SERVICE_NAME' nicht gefunden. √úberspringe L√∂schung."
          fi

      - name: Node.js f√ºr CDK einrichten
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: CDK installieren und deployen
        working-directory: ./infra
        env:
          APP_VERSION: ${{ needs.build-and-scan.outputs.version }}
          COMMIT_SHA: ${{ github.sha }}
        run: |
          echo "Installing CDK dependencies..."
          npm ci
          
          echo "Building TypeScript..."
          npm run build
          
          echo "Deploying CDK stack for production..."
          npx cdk deploy \
            --require-approval never \
            --context isPreview=false \
            --context appVersion=$APP_VERSION \
            --context commitSha=$COMMIT_SHA
          
          echo "Deployment completed"

      - name: Service URL ausgeben
        run: |
          STACK_NAME="bachelor-prod-stack" 
          SERVICE_URL=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='ServiceURL'].OutputValue" \
            --output text)
          echo "üöÄ Service deployed to: $SERVICE_URL"